"""
    Copyright 2015 Impera

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: bart@impera.io
"""

typedef hoststring as string matching /^[A-Za-z0-9-]+(\.[A-Za-z0-9-]+)*\.?$/

entity Zone:
    """ A dns zone.
    """
    string hostmaster
    string domain
    number refresh=7200
    number retry=600
    number expiry=1209600
    number ttl=3600
end

implement Zone using std::none

Zone slave_zones [0:] -- [0:] Server slaves
Zone master_zones [0:] -- [1] Server master

entity Server extends ip::services::Server:
    """
        A dns server
    """
    bool recursive=true
    # constraint: a dns record should exist for this hostname!
end

entity Record:
    """
        A generic dns resource record
    """
    string resource=""
    string value
    string record_type
end

Record records [0:] -- [1] Zone zone

entity A extends Record:
    """ An A record
        
        :param ipaddress: The address to point this record to
    """
    ip::ip ipaddress
end
implement A using aImpl

implementation aImpl for A:
    self.record_type = "a"
    self.value = self.ipaddress
end

entity NS extends Record:
    hoststring server
end
implement NS using nsImpl

implementation nsImpl for NS:
    self.value = self.server
    self.record_type = "ns"
end

entity Cname extends Record:

end
implement Cname using cnameImpl

implementation cnameImpl for Cname:
    self.record_type = "cname"
end

entity MX extends Record:
    hoststring server
    number priority=10
end
implement MX using mxImpl

implementation mxImpl for MX:
    self.record_type = "mx"
    self.value = "{{ priority }} {{ server }}"
end

entity AAAA extends Record:
    string ipaddress
end
implement AAAA using aaaaImpl

implementation aaaaImpl for AAAA:
    self.record_type = "aaaa"
    self.value = self.ipaddress
end

entity PTR extends Record:
    string name
    ip::ip ipaddress
end

implementation ptrImpl for PTR:
    self.resource = dns::ip_to_arpa(ipaddress)
    self.value = name
    self.record_type = "ptr"
end

implement Record using std::none
implement PTR using ptrImpl

